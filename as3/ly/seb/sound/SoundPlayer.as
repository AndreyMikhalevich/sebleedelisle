/** * @author Seb *///import net.pluginmedia.utils.SuperSound;//import net.pluginmedia.utils.SoundCollection;package ly.seb.sound{	public class SoundPlayer 	{		public static var sounds:Object = {};		public static var muted:Boolean = false;				public static var defaultPath:String = "";						public static function addSound(sname:String, soundref:*, vol:Number = 1):SuperSound{									var s:SuperSound = new SuperSound(sname, soundref, vol);								s.volume = vol; 			sounds[sname] = s;			return s;										}				 		public static function playSound(sname:String, vol:Number=Number.NaN,  pan:Number=Number.NaN, offset : Number = 0 ):ISoundPlayable		{			var sound:ISoundPlayable = sounds[sname];			if(!sound) trace("WARNING SoundPlayer - sound "+sname+" not found");			else sound.playSound(vol, pan, offset); 			return sound; 				}				public static function loopSound(sname:String, count:int, vol:Number=Number.NaN,  pan:Number=Number.NaN, offset : Number = 0 ):ISoundPlayable		{			//trace("play sound "+sname+" " +sounds[sname]);			var sound:ISoundPlayable = sounds[sname];						SuperSound(sound).loopSound(count, vol, pan, offset); 			return sound; 				}		public static function stopSound(sname:String):void		{			//trace("play sound "+sname+" " +sounds[sname]);			var sound:ISoundPlayable = sounds[sname];						SuperSound(sound).stopSound(); 				}				public static function getSound(sname:String):SuperSound		{			return sounds[sname];				}				public static function addSoundCollection(sname:String, soundrefs:Array, vol:Number = 1):SoundCollection		{			var sc:SoundCollection = new SoundCollection(sname, soundrefs, vol);								//sounds[sname] = s;			//return s;							sounds[sname] = sc; 			return sc; 					}	}}