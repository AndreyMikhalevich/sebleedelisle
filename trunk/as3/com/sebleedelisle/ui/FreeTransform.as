package com.sebleedelisle.ui {	import flash.display.*;	import flash.events.*;	import flash.geom.*;		import com.sebleedelisle.maths.Vector2;	 	public class FreeTransform extends Sprite	{		public static var CHANGE:String = "change"; 				public var rect:Rectangle; 		public var resizing:Boolean; 		public var mouseDownOffset:Vector2; 		public var handleSize:Number = 20; 		public var fillAlpha:Number = 0.5; 		public var lineAlpha:Number =1; 		public var fillColour:Number = 0xff0000; 		public var lineColour:Number = 0xffffff; 				public var liveUpdate:Boolean = true; 						public function FreeTransform(xpos:Number = 0, ypos:Number = 0,w:Number = 100, h:Number = 100 )		{			super(); 						rect = new Rectangle(xpos,ypos,w,h); 						//x = xpos; 			//y = ypos; 						drawRect();						addEventListener(MouseEvent.MOUSE_DOWN, mouseDownFunc); 			//addEventListener(MouseEvent.MOUSE_OVER, mouseOverFunc); 			//addEventListener(MouseEvent.MOUSE_OUT, mouseOutFunc); 						mouseDownOffset = new Vector2(0,0); 			resizing = false; 		}						public function mouseDownFunc(e:MouseEvent) : void		{						if((mouseX>rect.right-handleSize)&&(mouseY>rect.bottom-handleSize)) 			{								resizing = true; 				mouseDownOffset.reset(rect.right - mouseX-rect.left, rect.bottom-mouseY-rect.top); 						}			else 			{				mouseDownOffset.reset(mouseX-rect.x, mouseY-rect.y); 						}			stage.addEventListener(Event.ENTER_FRAME, change); 			stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpFunc); 								}				public function change(e:Event) : void		{					var r:Rectangle = rect.clone();			if(resizing)			{				r.width = mouseX+mouseDownOffset.x; 				r.height = mouseY+mouseDownOffset.y; 											} 			else 			{				//move(mouseX-(mouseDownOffset.x), mouseY-(mouseDownOffset.y)); 				r.x = mouseX-(mouseDownOffset.x); 				r.y = mouseY-(mouseDownOffset.y); 			}						if(!r.equals(rect))			{				rect = r; 				drawRect(); 			//e.updateAfterEvent(); 				if(liveUpdate) dispatchEvent(new Event(CHANGE)); 			}		}				public function move(x:Number, y:Number) : void		{			rect.x = x; 			rect.y = y; 		}				public function mouseUpFunc(e:MouseEvent) : void		{			stage.removeEventListener(Event.ENTER_FRAME, change); 			stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpFunc); 			dispatchEvent(new Event(CHANGE)); 			resizing = false; 					}						public function drawRect() : void		{			graphics.clear(); 			graphics.lineStyle(2,lineColour,lineAlpha); 			graphics.beginFill(fillColour,fillAlpha); 			graphics.drawRect(rect.left,rect.top,rect.width, rect.height); 			graphics.endFill(); 		}					}}